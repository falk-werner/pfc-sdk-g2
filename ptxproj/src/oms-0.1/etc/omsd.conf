#  !:          negation eines ausdrucks. 
#  key:        Taster (RESET; RST_ALL) betätigt
# !key:        Taster (RESET; RST_ALL) nicht betätigt
#  switch:     Umschalter (RUN; STOP)
# !switch:     Umschalter (RUN; STOP) nicht aktiv (unsinnig))
#  down:       Taster gedrückt nicht implementiert
#  up:         Taster Losgelassen. 
#  downtime:   Zeit die Taster gedrückt sein muss
# !downtime:   Zeit die Taster maximal gedrückt sein dar
#  uptime:     nicht vorgesehen
#  callscript: Aufzurufendes Script
#  called:     status folgt auf anderen Status
#  callstate:  Folgestatus
#  need:       benötigt einen zu definierenden Status 
# !need:       erfordert, dass der definierte status nicht aktiv ist

#This is an example-File it shows how to use the omsd.conf

# Old Variant until Firmware 03
After_Reset {
        called
        key RST_ALL
        switch STOP
        up
}

Reset {
        key RST_ALL
        downtime 6950
        callscript
                eventmsg -n omsd  0x80000003 &
                usleep 50000
                #reboot in any circumstances!!!
                /sbin/reboot -nf
        endscript
        callstate After_Reset
}

Fix_IP {
        key RST_ALL
        switch STOP
        downtime 2000
        up
        !need After_Reset
        callscript
                killall -9 udhcpc
                killall -9 bootpc-startup
                killall -9 bootpc
                ifconfig eth0 192.168.1.17
                eventmsg -n omsd 0x80000001
        endscript
}
#Example for codesys-restart behavior
Warm_Start {
        called
        key RESET
        !downtime 5000
        up
        callscript
                echo "codesys warm-start"
        endscript
}
After_Cold {
        called
        key RESET
        up
}

Cold_Start {
        called
        key RESET
        downtime 5000
        callscript
                echo "codesys Kalt-start"
        endscript
        callstate After_Cold
}
Pre_Reset {
        key RESET
        downtime 2000
        !need After_Cold
        !need Warm_Start
        callstate Warm_Start
        callstate Cold_Start
}
